//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CarFleetEntities : DbContext
    {
        public CarFleetEntities()
            : base("name=CarFleetEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CompanyType> CompanyTypes { get; set; }
        public virtual DbSet<DefaultMaintenanceOperation> DefaultMaintenanceOperations { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<Device_Services> Device_Services { get; set; }
        public virtual DbSet<DeviceModel> DeviceModels { get; set; }
        public virtual DbSet<DeviceStatu> DeviceStatus { get; set; }
        public virtual DbSet<Driver> Drivers { get; set; }
        public virtual DbSet<DrivingRulesConfiguration> DrivingRulesConfigurations { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<EventPolicy> EventPolicies { get; set; }
        public virtual DbSet<EventType> EventTypes { get; set; }
        public virtual DbSet<Fleet> Fleets { get; set; }
        public virtual DbSet<Fleet_FleetFeatures> Fleet_FleetFeatures { get; set; }
        public virtual DbSet<FleetFeature> FleetFeatures { get; set; }
        public virtual DbSet<GangwayServiceFrame> GangwayServiceFrames { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<MainData> MainDatas { get; set; }
        public virtual DbSet<MaintenanceOperation> MaintenanceOperations { get; set; }
        public virtual DbSet<MaintenanceOperation_Company> MaintenanceOperation_Company { get; set; }
        public virtual DbSet<MaintenanceOperation_Vehicle> MaintenanceOperation_Vehicle { get; set; }
        public virtual DbSet<PendingCommand> PendingCommands { get; set; }
        public virtual DbSet<PlatformService> PlatformServices { get; set; }
        public virtual DbSet<Poi> Pois { get; set; }
        public virtual DbSet<Point> Points { get; set; }
        public virtual DbSet<PoiType> PoiTypes { get; set; }
        public virtual DbSet<Polygon> Polygons { get; set; }
        public virtual DbSet<Polygon_Point> Polygon_Point { get; set; }
        public virtual DbSet<Route> Routes { get; set; }
        public virtual DbSet<SecurityRoute> SecurityRoutes { get; set; }
        public virtual DbSet<SecurityRoute_Point> SecurityRoute_Point { get; set; }
        public virtual DbSet<SecurityRoute_Vehicle> SecurityRoute_Vehicle { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<Sim> Sims { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TimeZone> TimeZones { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<User_Fleet> User_Fleet { get; set; }
        public virtual DbSet<UserLogin> UserLogins { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<Vehicle> Vehicles { get; set; }
        public virtual DbSet<Vehicle_Poi> Vehicle_Poi { get; set; }
        public virtual DbSet<Vehicle_WeekDay> Vehicle_WeekDay { get; set; }
        public virtual DbSet<VehicleType> VehicleTypes { get; set; }
        public virtual DbSet<WeekDay> WeekDays { get; set; }
    
        public virtual ObjectResult<sp_behaviorEvents_Result> sp_behaviorEvents(Nullable<int> id_device)
        {
            var id_deviceParameter = id_device.HasValue ?
                new ObjectParameter("id_device", id_device) :
                new ObjectParameter("id_device", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_behaviorEvents_Result>("sp_behaviorEvents", id_deviceParameter);
        }
    
        public virtual ObjectResult<sp_behaviorOdometer_Result> sp_behaviorOdometer(Nullable<int> id_device)
        {
            var id_deviceParameter = id_device.HasValue ?
                new ObjectParameter("id_device", id_device) :
                new ObjectParameter("id_device", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_behaviorOdometer_Result>("sp_behaviorOdometer", id_deviceParameter);
        }
    
        public virtual ObjectResult<sp_behaviorSpeed_Result> sp_behaviorSpeed(Nullable<int> id_device)
        {
            var id_deviceParameter = id_device.HasValue ?
                new ObjectParameter("id_device", id_device) :
                new ObjectParameter("id_device", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_behaviorSpeed_Result>("sp_behaviorSpeed", id_deviceParameter);
        }
    
        public virtual int sp_CompanyInsert(string name, Nullable<int> companytype, Nullable<int> company, string cif, string address, string phone, string fax, string email, string registry)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var companytypeParameter = companytype.HasValue ?
                new ObjectParameter("companytype", companytype) :
                new ObjectParameter("companytype", typeof(int));
    
            var companyParameter = company.HasValue ?
                new ObjectParameter("company", company) :
                new ObjectParameter("company", typeof(int));
    
            var cifParameter = cif != null ?
                new ObjectParameter("cif", cif) :
                new ObjectParameter("cif", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("fax", fax) :
                new ObjectParameter("fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var registryParameter = registry != null ?
                new ObjectParameter("registry", registry) :
                new ObjectParameter("registry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CompanyInsert", nameParameter, companytypeParameter, companyParameter, cifParameter, addressParameter, phoneParameter, faxParameter, emailParameter, registryParameter);
        }
    
        public virtual int sp_CompanyUpdate(Nullable<int> id, string name, Nullable<int> companyType, string cif, string address, string phone, string fax, string email, string registry)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var companyTypeParameter = companyType.HasValue ?
                new ObjectParameter("companyType", companyType) :
                new ObjectParameter("companyType", typeof(int));
    
            var cifParameter = cif != null ?
                new ObjectParameter("cif", cif) :
                new ObjectParameter("cif", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("fax", fax) :
                new ObjectParameter("fax", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var registryParameter = registry != null ?
                new ObjectParameter("registry", registry) :
                new ObjectParameter("registry", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CompanyUpdate", idParameter, nameParameter, companyTypeParameter, cifParameter, addressParameter, phoneParameter, faxParameter, emailParameter, registryParameter);
        }
    
        public virtual int sp_DeviceDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeviceDelete", idParameter);
        }
    
        public virtual int sp_DeviceGralInsert(Nullable<int> id_devicemodel, Nullable<int> id_sim, string system_id, string imei, string phone_number)
        {
            var id_devicemodelParameter = id_devicemodel.HasValue ?
                new ObjectParameter("id_devicemodel", id_devicemodel) :
                new ObjectParameter("id_devicemodel", typeof(int));
    
            var id_simParameter = id_sim.HasValue ?
                new ObjectParameter("id_sim", id_sim) :
                new ObjectParameter("id_sim", typeof(int));
    
            var system_idParameter = system_id != null ?
                new ObjectParameter("system_id", system_id) :
                new ObjectParameter("system_id", typeof(string));
    
            var imeiParameter = imei != null ?
                new ObjectParameter("imei", imei) :
                new ObjectParameter("imei", typeof(string));
    
            var phone_numberParameter = phone_number != null ?
                new ObjectParameter("phone_number", phone_number) :
                new ObjectParameter("phone_number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeviceGralInsert", id_devicemodelParameter, id_simParameter, system_idParameter, imeiParameter, phone_numberParameter);
        }
    
        public virtual int sp_DeviceGralUpdate(Nullable<int> id, Nullable<int> id_devicemodel, Nullable<int> id_sim, string system_id, string imei, string phone_number)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var id_devicemodelParameter = id_devicemodel.HasValue ?
                new ObjectParameter("id_devicemodel", id_devicemodel) :
                new ObjectParameter("id_devicemodel", typeof(int));
    
            var id_simParameter = id_sim.HasValue ?
                new ObjectParameter("id_sim", id_sim) :
                new ObjectParameter("id_sim", typeof(int));
    
            var system_idParameter = system_id != null ?
                new ObjectParameter("system_id", system_id) :
                new ObjectParameter("system_id", typeof(string));
    
            var imeiParameter = imei != null ?
                new ObjectParameter("imei", imei) :
                new ObjectParameter("imei", typeof(string));
    
            var phone_numberParameter = phone_number != null ?
                new ObjectParameter("phone_number", phone_number) :
                new ObjectParameter("phone_number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeviceGralUpdate", idParameter, id_devicemodelParameter, id_simParameter, system_idParameter, imeiParameter, phone_numberParameter);
        }
    
        public virtual int sp_DeviceInsert(Nullable<int> id_vehicle, Nullable<int> id_company, string system_id, string phone_number)
        {
            var id_vehicleParameter = id_vehicle.HasValue ?
                new ObjectParameter("id_vehicle", id_vehicle) :
                new ObjectParameter("id_vehicle", typeof(int));
    
            var id_companyParameter = id_company.HasValue ?
                new ObjectParameter("id_company", id_company) :
                new ObjectParameter("id_company", typeof(int));
    
            var system_idParameter = system_id != null ?
                new ObjectParameter("system_id", system_id) :
                new ObjectParameter("system_id", typeof(string));
    
            var phone_numberParameter = phone_number != null ?
                new ObjectParameter("phone_number", phone_number) :
                new ObjectParameter("phone_number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeviceInsert", id_vehicleParameter, id_companyParameter, system_idParameter, phone_numberParameter);
        }
    
        public virtual int sp_DeviceUpdate(Nullable<int> id_vehicle, Nullable<int> id_company, string system_id, string phone_number)
        {
            var id_vehicleParameter = id_vehicle.HasValue ?
                new ObjectParameter("id_vehicle", id_vehicle) :
                new ObjectParameter("id_vehicle", typeof(int));
    
            var id_companyParameter = id_company.HasValue ?
                new ObjectParameter("id_company", id_company) :
                new ObjectParameter("id_company", typeof(int));
    
            var system_idParameter = system_id != null ?
                new ObjectParameter("system_id", system_id) :
                new ObjectParameter("system_id", typeof(string));
    
            var phone_numberParameter = phone_number != null ?
                new ObjectParameter("phone_number", phone_number) :
                new ObjectParameter("phone_number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeviceUpdate", id_vehicleParameter, id_companyParameter, system_idParameter, phone_numberParameter);
        }
    
        public virtual int sp_DriverInsert(string name, string surname, Nullable<int> id_company, string personal_id, string phone_number)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("surname", surname) :
                new ObjectParameter("surname", typeof(string));
    
            var id_companyParameter = id_company.HasValue ?
                new ObjectParameter("id_company", id_company) :
                new ObjectParameter("id_company", typeof(int));
    
            var personal_idParameter = personal_id != null ?
                new ObjectParameter("personal_id", personal_id) :
                new ObjectParameter("personal_id", typeof(string));
    
            var phone_numberParameter = phone_number != null ?
                new ObjectParameter("phone_number", phone_number) :
                new ObjectParameter("phone_number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DriverInsert", nameParameter, surnameParameter, id_companyParameter, personal_idParameter, phone_numberParameter);
        }
    
        public virtual int sp_DriverUpdate(Nullable<int> id, string name, string surname, Nullable<int> id_company, string personal_id, string phone_number)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("surname", surname) :
                new ObjectParameter("surname", typeof(string));
    
            var id_companyParameter = id_company.HasValue ?
                new ObjectParameter("id_company", id_company) :
                new ObjectParameter("id_company", typeof(int));
    
            var personal_idParameter = personal_id != null ?
                new ObjectParameter("personal_id", personal_id) :
                new ObjectParameter("personal_id", typeof(string));
    
            var phone_numberParameter = phone_number != null ?
                new ObjectParameter("phone_number", phone_number) :
                new ObjectParameter("phone_number", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DriverUpdate", idParameter, nameParameter, surnameParameter, id_companyParameter, personal_idParameter, phone_numberParameter);
        }
    
        public virtual int sp_FleetInsert(Nullable<int> id_company, string name)
        {
            var id_companyParameter = id_company.HasValue ?
                new ObjectParameter("id_company", id_company) :
                new ObjectParameter("id_company", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FleetInsert", id_companyParameter, nameParameter);
        }
    
        public virtual int sp_FleetUpdate(Nullable<int> id, Nullable<int> id_company, string name)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var id_companyParameter = id_company.HasValue ?
                new ObjectParameter("id_company", id_company) :
                new ObjectParameter("id_company", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_FleetUpdate", idParameter, id_companyParameter, nameParameter);
        }
    
        public virtual int sp_PoiInsert(Nullable<int> id_company, string name, Nullable<double> lat, Nullable<double> lng, Nullable<int> rad, Nullable<int> type)
        {
            var id_companyParameter = id_company.HasValue ?
                new ObjectParameter("id_company", id_company) :
                new ObjectParameter("id_company", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("lat", lat) :
                new ObjectParameter("lat", typeof(double));
    
            var lngParameter = lng.HasValue ?
                new ObjectParameter("lng", lng) :
                new ObjectParameter("lng", typeof(double));
    
            var radParameter = rad.HasValue ?
                new ObjectParameter("rad", rad) :
                new ObjectParameter("rad", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PoiInsert", id_companyParameter, nameParameter, latParameter, lngParameter, radParameter, typeParameter);
        }
    
        public virtual int sp_PoiUpdate(Nullable<int> id, string name, Nullable<double> lat, Nullable<double> lng, Nullable<int> rad, Nullable<int> type)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var latParameter = lat.HasValue ?
                new ObjectParameter("lat", lat) :
                new ObjectParameter("lat", typeof(double));
    
            var lngParameter = lng.HasValue ?
                new ObjectParameter("lng", lng) :
                new ObjectParameter("lng", typeof(double));
    
            var radParameter = rad.HasValue ?
                new ObjectParameter("rad", rad) :
                new ObjectParameter("rad", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PoiUpdate", idParameter, nameParameter, latParameter, lngParameter, radParameter, typeParameter);
        }
    
        public virtual int sp_SimInsert(string @operator, string number, string icc)
        {
            var operatorParameter = @operator != null ?
                new ObjectParameter("operator", @operator) :
                new ObjectParameter("operator", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            var iccParameter = icc != null ?
                new ObjectParameter("icc", icc) :
                new ObjectParameter("icc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SimInsert", operatorParameter, numberParameter, iccParameter);
        }
    
        public virtual ObjectResult<sp_SimSelect_Result> sp_SimSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SimSelect_Result>("sp_SimSelect");
        }
    
        public virtual int sp_SimUpdate(Nullable<int> id, string @operator, string number, string icc)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var operatorParameter = @operator != null ?
                new ObjectParameter("operator", @operator) :
                new ObjectParameter("operator", typeof(string));
    
            var numberParameter = number != null ?
                new ObjectParameter("number", number) :
                new ObjectParameter("number", typeof(string));
    
            var iccParameter = icc != null ?
                new ObjectParameter("icc", icc) :
                new ObjectParameter("icc", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_SimUpdate", idParameter, operatorParameter, numberParameter, iccParameter);
        }
    
        public virtual int sp_UserFleetDelete(Nullable<int> idUser)
        {
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserFleetDelete", idUserParameter);
        }
    
        public virtual int sp_UserFleetInsert(Nullable<int> idFleet)
        {
            var idFleetParameter = idFleet.HasValue ?
                new ObjectParameter("idFleet", idFleet) :
                new ObjectParameter("idFleet", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserFleetInsert", idFleetParameter);
        }
    
        public virtual ObjectResult<sp_UserFleetSelect_Result> sp_UserFleetSelect(Nullable<int> iduser)
        {
            var iduserParameter = iduser.HasValue ?
                new ObjectParameter("iduser", iduser) :
                new ObjectParameter("iduser", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserFleetSelect_Result>("sp_UserFleetSelect", iduserParameter);
        }
    
        public virtual int sp_UserFleetUpdate(Nullable<int> id, Nullable<int> idUser, Nullable<int> idFleet)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var idUserParameter = idUser.HasValue ?
                new ObjectParameter("idUser", idUser) :
                new ObjectParameter("idUser", typeof(int));
    
            var idFleetParameter = idFleet.HasValue ?
                new ObjectParameter("idFleet", idFleet) :
                new ObjectParameter("idFleet", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserFleetUpdate", idParameter, idUserParameter, idFleetParameter);
        }
    
        public virtual int sp_UserInsert(Nullable<int> id_usertype, Nullable<int> id_company, Nullable<int> id_language, string name, string login, string password)
        {
            var id_usertypeParameter = id_usertype.HasValue ?
                new ObjectParameter("id_usertype", id_usertype) :
                new ObjectParameter("id_usertype", typeof(int));
    
            var id_companyParameter = id_company.HasValue ?
                new ObjectParameter("id_company", id_company) :
                new ObjectParameter("id_company", typeof(int));
    
            var id_languageParameter = id_language.HasValue ?
                new ObjectParameter("id_language", id_language) :
                new ObjectParameter("id_language", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserInsert", id_usertypeParameter, id_companyParameter, id_languageParameter, nameParameter, loginParameter, passwordParameter);
        }
    
        public virtual ObjectResult<sp_UserLoginApp_Result> sp_UserLoginApp(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_UserLoginApp_Result>("sp_UserLoginApp", loginParameter, passwordParameter);
        }
    
        public virtual int sp_UserUpdate(Nullable<int> id, Nullable<int> id_usertype, Nullable<int> id_language, string name, string login, string password)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var id_usertypeParameter = id_usertype.HasValue ?
                new ObjectParameter("id_usertype", id_usertype) :
                new ObjectParameter("id_usertype", typeof(int));
    
            var id_languageParameter = id_language.HasValue ?
                new ObjectParameter("id_language", id_language) :
                new ObjectParameter("id_language", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UserUpdate", idParameter, id_usertypeParameter, id_languageParameter, nameParameter, loginParameter, passwordParameter);
        }
    
        public virtual int sp_VehicleDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VehicleDelete", idParameter);
        }
    
        public virtual int sp_VehicleInsert(Nullable<int> id_company, Nullable<int> id_fleet, Nullable<int> id_vehicletype, Nullable<int> id_driver, string name, string make, string model, Nullable<int> year, string plate, Nullable<double> odometer, string color, string chassis_number, string factory_color, Nullable<System.DateTime> installation_date_time)
        {
            var id_companyParameter = id_company.HasValue ?
                new ObjectParameter("id_company", id_company) :
                new ObjectParameter("id_company", typeof(int));
    
            var id_fleetParameter = id_fleet.HasValue ?
                new ObjectParameter("id_fleet", id_fleet) :
                new ObjectParameter("id_fleet", typeof(int));
    
            var id_vehicletypeParameter = id_vehicletype.HasValue ?
                new ObjectParameter("id_vehicletype", id_vehicletype) :
                new ObjectParameter("id_vehicletype", typeof(int));
    
            var id_driverParameter = id_driver.HasValue ?
                new ObjectParameter("id_driver", id_driver) :
                new ObjectParameter("id_driver", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("make", make) :
                new ObjectParameter("make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var plateParameter = plate != null ?
                new ObjectParameter("plate", plate) :
                new ObjectParameter("plate", typeof(string));
    
            var odometerParameter = odometer.HasValue ?
                new ObjectParameter("odometer", odometer) :
                new ObjectParameter("odometer", typeof(double));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var chassis_numberParameter = chassis_number != null ?
                new ObjectParameter("chassis_number", chassis_number) :
                new ObjectParameter("chassis_number", typeof(string));
    
            var factory_colorParameter = factory_color != null ?
                new ObjectParameter("factory_color", factory_color) :
                new ObjectParameter("factory_color", typeof(string));
    
            var installation_date_timeParameter = installation_date_time.HasValue ?
                new ObjectParameter("installation_date_time", installation_date_time) :
                new ObjectParameter("installation_date_time", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VehicleInsert", id_companyParameter, id_fleetParameter, id_vehicletypeParameter, id_driverParameter, nameParameter, makeParameter, modelParameter, yearParameter, plateParameter, odometerParameter, colorParameter, chassis_numberParameter, factory_colorParameter, installation_date_timeParameter);
        }
    
        public virtual int sp_VehiclePoiDelete(Nullable<int> id_vehicle)
        {
            var id_vehicleParameter = id_vehicle.HasValue ?
                new ObjectParameter("id_vehicle", id_vehicle) :
                new ObjectParameter("id_vehicle", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VehiclePoiDelete", id_vehicleParameter);
        }
    
        public virtual int sp_VehiclePoiInsert(Nullable<int> id_vehicle, Nullable<int> id_poi)
        {
            var id_vehicleParameter = id_vehicle.HasValue ?
                new ObjectParameter("id_vehicle", id_vehicle) :
                new ObjectParameter("id_vehicle", typeof(int));
    
            var id_poiParameter = id_poi.HasValue ?
                new ObjectParameter("id_poi", id_poi) :
                new ObjectParameter("id_poi", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VehiclePoiInsert", id_vehicleParameter, id_poiParameter);
        }
    
        public virtual ObjectResult<sp_VehiclePoiSelect_Result> sp_VehiclePoiSelect(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VehiclePoiSelect_Result>("sp_VehiclePoiSelect", idParameter);
        }
    
        public virtual ObjectResult<sp_VehicleSecRouteAsign_Result> sp_VehicleSecRouteAsign(Nullable<int> id_company)
        {
            var id_companyParameter = id_company.HasValue ?
                new ObjectParameter("id_company", id_company) :
                new ObjectParameter("id_company", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VehicleSecRouteAsign_Result>("sp_VehicleSecRouteAsign", id_companyParameter);
        }
    
        public virtual int sp_VehicleSecRouteInsert(Nullable<int> id_srv, Nullable<int> id_sr, Nullable<int> id_vehicle, Nullable<bool> time_control, Nullable<System.DateTime> start_time, Nullable<System.DateTime> end_time, Nullable<bool> stop_control)
        {
            var id_srvParameter = id_srv.HasValue ?
                new ObjectParameter("id_srv", id_srv) :
                new ObjectParameter("id_srv", typeof(int));
    
            var id_srParameter = id_sr.HasValue ?
                new ObjectParameter("id_sr", id_sr) :
                new ObjectParameter("id_sr", typeof(int));
    
            var id_vehicleParameter = id_vehicle.HasValue ?
                new ObjectParameter("id_vehicle", id_vehicle) :
                new ObjectParameter("id_vehicle", typeof(int));
    
            var time_controlParameter = time_control.HasValue ?
                new ObjectParameter("time_control", time_control) :
                new ObjectParameter("time_control", typeof(bool));
    
            var start_timeParameter = start_time.HasValue ?
                new ObjectParameter("start_time", start_time) :
                new ObjectParameter("start_time", typeof(System.DateTime));
    
            var end_timeParameter = end_time.HasValue ?
                new ObjectParameter("end_time", end_time) :
                new ObjectParameter("end_time", typeof(System.DateTime));
    
            var stop_controlParameter = stop_control.HasValue ?
                new ObjectParameter("stop_control", stop_control) :
                new ObjectParameter("stop_control", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VehicleSecRouteInsert", id_srvParameter, id_srParameter, id_vehicleParameter, time_controlParameter, start_timeParameter, end_timeParameter, stop_controlParameter);
        }
    
        public virtual ObjectResult<sp_VehicleSecRoutePermitida_Result> sp_VehicleSecRoutePermitida(Nullable<int> id_vehicle)
        {
            var id_vehicleParameter = id_vehicle.HasValue ?
                new ObjectParameter("id_vehicle", id_vehicle) :
                new ObjectParameter("id_vehicle", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_VehicleSecRoutePermitida_Result>("sp_VehicleSecRoutePermitida", id_vehicleParameter);
        }
    
        public virtual int sp_VehicleSecRouteUpdate(Nullable<int> id_srv, Nullable<int> id_sr, Nullable<int> id_vehicle, Nullable<bool> time_control, Nullable<System.DateTime> start_time, Nullable<System.DateTime> end_time, Nullable<bool> stop_control)
        {
            var id_srvParameter = id_srv.HasValue ?
                new ObjectParameter("id_srv", id_srv) :
                new ObjectParameter("id_srv", typeof(int));
    
            var id_srParameter = id_sr.HasValue ?
                new ObjectParameter("id_sr", id_sr) :
                new ObjectParameter("id_sr", typeof(int));
    
            var id_vehicleParameter = id_vehicle.HasValue ?
                new ObjectParameter("id_vehicle", id_vehicle) :
                new ObjectParameter("id_vehicle", typeof(int));
    
            var time_controlParameter = time_control.HasValue ?
                new ObjectParameter("time_control", time_control) :
                new ObjectParameter("time_control", typeof(bool));
    
            var start_timeParameter = start_time.HasValue ?
                new ObjectParameter("start_time", start_time) :
                new ObjectParameter("start_time", typeof(System.DateTime));
    
            var end_timeParameter = end_time.HasValue ?
                new ObjectParameter("end_time", end_time) :
                new ObjectParameter("end_time", typeof(System.DateTime));
    
            var stop_controlParameter = stop_control.HasValue ?
                new ObjectParameter("stop_control", stop_control) :
                new ObjectParameter("stop_control", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VehicleSecRouteUpdate", id_srvParameter, id_srParameter, id_vehicleParameter, time_controlParameter, start_timeParameter, end_timeParameter, stop_controlParameter);
        }
    
        public virtual int sp_VehicleUpdate(Nullable<int> id, Nullable<int> id_company, Nullable<int> id_fleet, Nullable<int> id_vehicletype, Nullable<int> id_driver, string name, string make, string model, Nullable<int> year, string plate, Nullable<double> odometer, string color, string chassis_number, string factory_color, Nullable<System.DateTime> installation_date_time)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var id_companyParameter = id_company.HasValue ?
                new ObjectParameter("id_company", id_company) :
                new ObjectParameter("id_company", typeof(int));
    
            var id_fleetParameter = id_fleet.HasValue ?
                new ObjectParameter("id_fleet", id_fleet) :
                new ObjectParameter("id_fleet", typeof(int));
    
            var id_vehicletypeParameter = id_vehicletype.HasValue ?
                new ObjectParameter("id_vehicletype", id_vehicletype) :
                new ObjectParameter("id_vehicletype", typeof(int));
    
            var id_driverParameter = id_driver.HasValue ?
                new ObjectParameter("id_driver", id_driver) :
                new ObjectParameter("id_driver", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var makeParameter = make != null ?
                new ObjectParameter("make", make) :
                new ObjectParameter("make", typeof(string));
    
            var modelParameter = model != null ?
                new ObjectParameter("model", model) :
                new ObjectParameter("model", typeof(string));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var plateParameter = plate != null ?
                new ObjectParameter("plate", plate) :
                new ObjectParameter("plate", typeof(string));
    
            var odometerParameter = odometer.HasValue ?
                new ObjectParameter("odometer", odometer) :
                new ObjectParameter("odometer", typeof(double));
    
            var colorParameter = color != null ?
                new ObjectParameter("color", color) :
                new ObjectParameter("color", typeof(string));
    
            var chassis_numberParameter = chassis_number != null ?
                new ObjectParameter("chassis_number", chassis_number) :
                new ObjectParameter("chassis_number", typeof(string));
    
            var factory_colorParameter = factory_color != null ?
                new ObjectParameter("factory_color", factory_color) :
                new ObjectParameter("factory_color", typeof(string));
    
            var installation_date_timeParameter = installation_date_time.HasValue ?
                new ObjectParameter("installation_date_time", installation_date_time) :
                new ObjectParameter("installation_date_time", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VehicleUpdate", idParameter, id_companyParameter, id_fleetParameter, id_vehicletypeParameter, id_driverParameter, nameParameter, makeParameter, modelParameter, yearParameter, plateParameter, odometerParameter, colorParameter, chassis_numberParameter, factory_colorParameter, installation_date_timeParameter);
        }
    
        public virtual int sp_VehicleWeekDayDelete(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VehicleWeekDayDelete", idParameter);
        }
    
        public virtual int sp_VehicleWeekDayInsert(Nullable<int> id_vehicle, Nullable<int> id_weekday, Nullable<byte> allowed)
        {
            var id_vehicleParameter = id_vehicle.HasValue ?
                new ObjectParameter("id_vehicle", id_vehicle) :
                new ObjectParameter("id_vehicle", typeof(int));
    
            var id_weekdayParameter = id_weekday.HasValue ?
                new ObjectParameter("id_weekday", id_weekday) :
                new ObjectParameter("id_weekday", typeof(int));
    
            var allowedParameter = allowed.HasValue ?
                new ObjectParameter("allowed", allowed) :
                new ObjectParameter("allowed", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VehicleWeekDayInsert", id_vehicleParameter, id_weekdayParameter, allowedParameter);
        }
    
        public virtual int sp_VehicleWeekDayUpdate(Nullable<int> id_vehicle, Nullable<int> id_weekday, Nullable<byte> allowed)
        {
            var id_vehicleParameter = id_vehicle.HasValue ?
                new ObjectParameter("id_vehicle", id_vehicle) :
                new ObjectParameter("id_vehicle", typeof(int));
    
            var id_weekdayParameter = id_weekday.HasValue ?
                new ObjectParameter("id_weekday", id_weekday) :
                new ObjectParameter("id_weekday", typeof(int));
    
            var allowedParameter = allowed.HasValue ?
                new ObjectParameter("allowed", allowed) :
                new ObjectParameter("allowed", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_VehicleWeekDayUpdate", id_vehicleParameter, id_weekdayParameter, allowedParameter);
        }
    }
}
